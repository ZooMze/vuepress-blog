(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{569:function(t,s,e){t.exports=e.p+"assets/img/dns's_process.273673d8.png"},570:function(t,s,e){t.exports=e.p+"assets/img/tcpip_model.9c4ed402.png"},571:function(t,s,e){t.exports=e.p+"assets/img/qq_capture.b2432c0f.png"},572:function(t,s,e){t.exports=e.p+"assets/img/track_tcp.ebcff5cd.png"},573:function(t,s,e){t.exports=e.p+"assets/img/track_tcp_shakehand.0b741f2c.png"},574:function(t,s,e){t.exports=e.p+"assets/img/shakehand_process.ae746afe.jpg"},575:function(t,s,e){t.exports=e.p+"assets/img/message.44cfa1ab.png"},636:function(t,s,e){"use strict";e.r(s);var r=e(5),a=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("这个看似简单的过程, 其实藏着非常多的基础知识点\n")]),t._v(" "),r("p",[t._v("首先总结下大致的流程有哪些然后进行展开阐述:")]),t._v(" "),r("ol",[r("li",[t._v("输入URL后 DNS查询")]),t._v(" "),r("li",[t._v("建立TCP连接")]),t._v(" "),r("li",[t._v("发送HTTP请求")]),t._v(" "),r("li",[t._v("服务器处理请求并返回报文")]),t._v(" "),r("li",[t._v("浏览器解析并render页面")]),t._v(" "),r("li",[t._v("完成后连接断开")])]),t._v(" "),r("h2",{attrs:{id:"url-和-uri"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#url-和-uri"}},[t._v("#")]),t._v(" URL 和 URI")]),t._v(" "),r("p",[t._v("这俩就差一个字母, 到底有什么差别呢?")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("URI 统一资源 "),r("em",[t._v("标志")]),t._v(" 符")]),t._v(" (Uniform Resource Identifier), 某个协议方案表示的资源的定位标识符, 用来标记资源本身(这里的协议方案指当前采用的协议)")]),t._v(" "),r("li",[r("strong",[t._v("URL 统一资源 "),r("em",[t._v("定位")]),t._v(" 符")]),t._v(" (Uniform Resource Locator), 则指资源在互联网中的地址")])]),t._v(" "),r("p",[t._v("这里举一个现实一点的例子加以说明: 张三是xxx公司的老板, 公司的地址在成都市春熙路666号;")]),t._v(" "),r("p",[t._v("这其中, xxx公司老板张三, 就是URI, 它表明了这个资源(张三这个人)本身; 位于成都市春熙路666号的xxx公司的老板张三 就是的 URL, 它表明了这个资源是什么, 同时如何找到它")]),t._v(" "),r("p",[t._v("实际上, URL 是 URI 的子集, 因为 URL 也可以直接访问到资源。")]),t._v(" "),r("h2",{attrs:{id:"dns-查询"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dns-查询"}},[t._v("#")]),t._v(" DNS 查询")]),t._v(" "),r("p",[t._v("巩固一下 DNS的定义, 全称是Domain Name System, 指域名系统, 主要用于域名和IP地址的转换")]),t._v(" "),r("p",[t._v("如果你输入的是纯 IP 地址, 则不会进行DNS查询, 所以输入域名的情况才会进行DNS查询, 域名只是为了方便记忆, 本节内容的前提是输入的URL是域名:")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("域名的定义")]),t._v(" "),r("p",[t._v("由一串用点分隔的名字(www.baidu.com)组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位（有时也指地理位置）")])]),t._v(" "),r("p",[r("img",{attrs:{src:e(569),alt:"String"}})]),t._v(" "),r("p",[t._v("这里是解说:")]),t._v(" "),r("ol",[r("li",[t._v("首先浏览器查找"),r("strong",[t._v("本地DNS")]),t._v("(Local DNS Server) 缓存的记录, 如果有就直接返回IP")]),t._v(" "),r("li",[t._v("如果上一步没有找到, 则往上到"),r("strong",[t._v("根DNS")]),t._v("(Root DNS Server), 根DNS会判断去找哪个顶级服务器")]),t._v(" "),r("li",[r("strong",[t._v("顶级DNS")]),t._v(", 即TLD(Top-Level DNS Server), TLD 会去找正确的授权服务器")]),t._v(" "),r("li",[t._v("在"),r("strong",[t._v("授权DNS")]),t._v("(Authoritative DNS Server) 内即可获取到正确的DNS结果, 并返回正确的IP")])]),t._v(" "),r("p",[t._v("详细可以在这里了解, "),r("a",{attrs:{href:"https://www.verisign.com/en_US/website-presence/online/how-dns-works/index.xhtml",target:"_blank",rel:"noopener noreferrer"}},[t._v("How DNS works"),r("OutboundLink")],1),t._v(", 英文水平差点估计看着吃力")]),t._v(" "),r("h2",{attrs:{id:"tcp-连接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tcp-连接"}},[t._v("#")]),t._v(" TCP 连接")]),t._v(" "),r("p",[t._v("经过上一步的DNS查询后, 接下来就要开始将获取到的IP(Internet Protocol)拿来建立TCP连接了, TCP(Transmission Control Protocol) 是一种面向连接的、可靠的、基于字节流的传输层通信协议。")]),t._v(" "),r("p",[t._v("* 本节使用 "),r("a",{attrs:{href:"https://www.wireshark.org/download.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("WireShark"),r("OutboundLink")],1),t._v(" 抓包工具进行演示辅助理解")]),t._v(" "),r("h3",{attrs:{id:"tcp-ip协议族的模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip协议族的模型"}},[t._v("#")]),t._v(" TCP/IP协议族的模型")]),t._v(" "),r("p",[t._v("关于TCP/IP协议族, 也可以 "),r("a",{attrs:{href:"https://blog.csdn.net/oro99/article/details/51198018",target:"_blank",rel:"noopener noreferrer"}},[t._v("点这里"),r("OutboundLink")],1),t._v(" 查看")]),t._v(" "),r("p",[t._v("TCP/IP 模型分为四层: 应用层, 传输层, IP层, 链路层。")]),t._v(" "),r("p",[r("img",{attrs:{src:e(570),alt:"String"}})]),t._v(" "),r("p",[t._v("懵逼树下懵逼果, 懵逼树前你和我, 下面就开始用刚刚提到的抓包工具来访问一下鹅网 "),r("a",{attrs:{href:"https://www.qq.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("www.qq.com"),r("OutboundLink")],1),t._v(", 在wireshark里面查看每一个层都是啥样的")]),t._v(" "),r("p",[r("img",{attrs:{src:e(571),alt:"String"}})]),t._v(" "),r("h3",{attrs:{id:"tcp-的三次握手"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的三次握手"}},[t._v("#")]),t._v(" TCP 的三次握手")]),t._v(" "),r("p",[t._v("三次握手(Three-way Handshake), 是指 "),r("strong",[t._v("建立一个TCP连接时, 客户端和服务器总共要发送三个包")]),t._v("。")]),t._v(" "),r("p",[t._v("这里访问一哈 "),r("a",{attrs:{href:"http://www.cdut.edu.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("成都理工大学官网"),r("OutboundLink")],1),t._v(", 在wireshark找到如图所示的这一条, 并追踪其TCP流:")]),t._v(" "),r("p",[r("img",{attrs:{src:e(572),alt:"String"}})]),t._v(" "),r("p",[r("img",{attrs:{src:e(573),alt:"String"}})]),t._v(" "),r("ol",[r("li",[t._v("第一次握手: 客户端发送 SYN = 1, seq = x")]),t._v(" "),r("li",[t._v("第二次握手: 服务器发送 SYN = 1, seq = y, ACK = 1, ack = x + 1")]),t._v(" "),r("li",[t._v("第三次握手: 客户端发送 seq = x + 1, ACK = 1, ack = y + 1")])]),t._v(" "),r("p",[t._v("有点复杂, 可以通过简略版图示来理解:")]),t._v(" "),r("p",[r("img",{attrs:{src:e(574),alt:"String"}})]),t._v(" "),r("p",[t._v("这里我有看到一个神奇的比喻:")]),t._v(" "),r("p",[t._v("在一个漆黑的夜晚对面有个妹子走来, 由于环境影响不能完全确认是不是熟人, 这时候就需要招手来互相确认是不是认识:")]),t._v(" "),r("p",[t._v("你首先向妹子招手(send SYN)，妹子看到你向自己招手后，向你点了点头挤出了一个微笑(send ACK)。你看到妹子微笑后确认了妹子成功辨认出了自己(进入estalished 确认状态);。")]),t._v(" "),r("p",[t._v("妹子有点不好意思, 出于礼貌点了点头露出了微笑(send ACK), 但是她也不完全确定你是在跟她打招呼, 万一是别人呢, 于是她也向你确认: 招手和微笑(send SYN), 这时候你发现她也在招手跟你确认, 于是你再次以点头和微笑回应(send ACK), 这样你们就快速走到跟前相认啦!")]),t._v(" "),r("p",[t._v("回顾一下这个过程:")]),t._v(" "),r("ol",[r("li",[t._v("你招手")]),t._v(" "),r("li",[t._v("妹子点头微笑")]),t._v(" "),r("li",[t._v("妹子招手")]),t._v(" "),r("li",[t._v("你点头微笑")])]),t._v(" "),r("p",[t._v("其中妹子 点头微笑 和 招手 是可以同时进行的, 于是简化一下, 就成了标准的 '三次握手'")]),t._v(" "),r("ol",[r("li",[t._v("你招手 (SYN)")]),t._v(" "),r("li",[t._v("妹子点头微笑并招手 (SYN & ACK)")]),t._v(" "),r("li",[t._v("你点头微笑 (ACK)")])]),t._v(" "),r("h2",{attrs:{id:"http-请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-请求"}},[t._v("#")]),t._v(" HTTP 请求")]),t._v(" "),r("p",[t._v("握完手之后, TCP连接就建立好了, 接下来就是常用到的请求内容了, 浏览器的开发者工具就能捕获到这些内容, 例如 GET 请求等")]),t._v(" "),r("h3",{attrs:{id:"http"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),r("p",[t._v("这个东西说起来就很广了, "),r("strong",[t._v("HTTP (Hyper Text Transform Protocol)")]),t._v(" 意为超文本传输协议, 这个协议建立在 TCP/IP 协议族之上")]),t._v(" "),r("p",[t._v("举例说明, 客户端发起了这么一个请求, 以下是发送的请求报文的组成:")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("什么是报文")]),t._v(" "),r("p",[t._v("用于 HTTP 协议交互的信息被称为 HTTP 报文, 是由多行（用 CR回车符+LF换行符 作换行符）数据构成的字符串文本。\nHTTP 报文大致可分为报文首部和报文主体两块。两者由最初出现的 空行（CR+LF）来划分。通常，并不一定要有报文主体。")]),t._v(" "),r("p",[r("img",{attrs:{src:e(575),alt:"message"}})])]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v("  "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("index"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html  "),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求头部")]),t._v("\nHost"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" somehost"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\nConnection"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" keep"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("alive\nContent"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" application"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("x"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("www"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("form"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("urlencoded\nContent"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Length"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内容实体, 它上方是有一个 空行 的, 用来分隔, 表示没有请求头了")]),t._v("\nname"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("zoomze"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("age"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br")])]),r("p",[t._v("这就是客户端发送的请求报文的内容, GET 指方法(method), /index.html 指资源对象, 也称之为请求URI, HTTP/1.1 是协议版本, 这三个内容又被称为 请求行, 是属于报文首部的内容;")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("HTTP 协议版本")]),t._v(" "),r("p",[t._v("HTTP/1.0 支持: GET, POST, HEAD\nHTTP/1.1 新增: OPTIONS, PUT, DELETE, TRACE, CONNECT")]),t._v(" "),r("p",[r("strong",[t._v("HEAD:")]),t._v(" 用于检测通信状态, 与 GET 唯一的区别是: HEAD 不返回报文主体\n"),r("strong",[t._v("OPTIONS:")]),t._v(" 用于查询对应URI所支持的方法\n"),r("strong",[t._v("TRACE:")]),t._v(" 方法容易引发XST跨站追踪, 并不常用, 略\n"),r("strong",[t._v("CONNECT:")]),t._v(" 要求用隧道协议连接代理")]),t._v(" "),r("p",[r("strong",[t._v("HTTP/1.1")]),t._v(" 所有的链接都是 持久连接(Connection: keep-alive), 但是在 "),r("strong",[t._v("HTTP/1.0")]),t._v(" 并未标准化, 同时由于持久连接的存在, 多数据请求得以实现以管线化(pipelining), 就跟异步的概念差不多")])]),t._v(" "),r("p",[t._v("然后是请求头部, 是以键值对的形式存在的, Host指主机名; Content-Type表明客户端发送的实体数据的数据类型; Content-Length指实体的字符长度; 除上述提到几个头部内容还有User-Agent: 客户端本身(浏览器)的信息; Accept: 客户端希望接收到的数据类型")]),t._v(" "),r("p",[t._v("服务器则会发送一些响应:")]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),t._v("\nDate"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Tue"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" Jul "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GMT")]),t._v("\nContent"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Length"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("666")]),t._v("\nContent"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里同样有一个空行, 用于分隔")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("html"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br")])]),r("p",[t._v("其中 协议版本不再赘述, 200 指状态码(satus code) OK是原因短语(reason-phrase)\n下方三行都是首部字段(header field)")]),t._v(" "),r("p",[t._v("接着就是资源实体的主体(entity body)")]),t._v(" "),r("h3",{attrs:{id:"https"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" HTTPS")]),t._v(" "),r("p",[t._v("HTTPS 中的 'S' 指 "),r("strong",[t._v("SSL/TLS")]),t._v(" 的鉴权/认证")]),t._v(" "),r("p",[t._v("这部分内容去看看阮老师的就好, 这儿就不班门弄斧了...")]),t._v(" "),r("p",[r("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSL/TLS协议运行机制的概述"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("图解SSL/TLS协议"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"http-响应"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-响应"}},[t._v("#")]),t._v(" HTTP 响应")]),t._v(" "),r("p",[t._v("服务器处理上述的请求完毕后, 开始执行响应动作, 返回所请求的内容或是JSON数据一类的都是在这个阶段内")]),t._v(" "),r("h2",{attrs:{id:"浏览器解析-页面渲染"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器解析-页面渲染"}},[t._v("#")]),t._v(" 浏览器解析 & 页面渲染")]),t._v(" "),r("p",[t._v("拿到了服务器返回的东西之后呢, 然后就是把这些东西呈现给用户了")]),t._v(" "),r("p",[t._v("根据服务器返回的东西类型不同, 浏览器对应的解析也是有不同的, 这里以返回 HTML 页面为例进行说明(不考虑返回JSON或者XML)")]),t._v(" "),r("h3",{attrs:{id:"渲染树-render-tree"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#渲染树-render-tree"}},[t._v("#")]),t._v(" 渲染树 Render Tree")]),t._v(" "),r("p",[t._v("浏览器渲染的过程其实是渲染 DOM 树和 CSSOM 树的融合, 两者的组合构成了浏览器的渲染树 Render Tree, 浏览器根据这些信息决定渲染谁和渲染再网页的哪个位置上, 例如 "),r("code",[t._v("display: none")]),t._v(" 属性就会影响到对应节点的渲染。")]),t._v(" "),r("ol",[r("li",[t._v("处理 HTML 标记并构建 DOM 树。")]),t._v(" "),r("li",[t._v("处理 CSS 标记并构建 CSSOM 树。")]),t._v(" "),r("li",[t._v("将 DOM 与 CSSOM 合并成一个渲染树。")]),t._v(" "),r("li",[t._v("根据渲染树来布局，以计算每个节点的几何信息。")]),t._v(" "),r("li",[t._v("将各个节点绘制到屏幕上。")])]),t._v(" "),r("p",[t._v("渲染完成后，连接即断开；")]),t._v(" "),r("p",[t._v("至此，就完成了从输入URL 到渲染完成页面的全部过程")]),t._v(" "),r("h2",{attrs:{id:"web-优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#web-优化"}},[t._v("#")]),t._v(" Web 优化")]),t._v(" "),r("p",[t._v("Web优化\n我们知道，人的耐心是有限的，一个页面如果超过8s，人基本上不会等了，这会对业务产生巨大影响。我们该如何去优化页面呢？")]),t._v(" "),r("p",[t._v("思路很简单，就是按照我们前面介绍的几大步骤去优化。我们先回顾一下几大步骤：")]),t._v(" "),r("ol",[r("li",[t._v("DNS查询")]),t._v(" "),r("li",[t._v("TCP连接")]),t._v(" "),r("li",[t._v("发送HTTP请求")]),t._v(" "),r("li",[t._v("Server处理HTTP请求并返回HTTP报文")]),t._v(" "),r("li",[t._v("浏览器解析并render页面")]),t._v(" "),r("li",[t._v("HTTP连接断开")])]),t._v(" "),r("p",[t._v("以下简单的说明了一些可优化的点：")]),t._v(" "),r("ol",[r("li",[t._v("尽量将server离用户近一些，例如人处在中国访问Apple，应该是Apple中国站提供服务，GSLB很重要。")]),t._v(" "),r("li",[t._v("不要把layout嵌入一层又一层，简单说就是嵌套别太深，不然影响解析和渲染性能。")]),t._v(" "),r("li",[t._v("有些数据可以在后台处理的，就不要在前端通过JavaScript处理了。")]),t._v(" "),r("li",[t._v("如果请求过大，Load Balance这些手段还是要上的。")]),t._v(" "),r("li",[t._v("保持HTTP连接，合理设置Connection。")]),t._v(" "),r("li",[t._v("后台事件性能要高，能够及时将结果返回给用户。")])])])}),[],!1,null,null,null);s.default=a.exports}}]);